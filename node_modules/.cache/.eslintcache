[{"/Users/ssmac/React/myfirst_reactapp/src/index.js":"1","/Users/ssmac/React/myfirst_reactapp/src/App.js":"2","/Users/ssmac/React/myfirst_reactapp/src/reportWebVitals.js":"3","/Users/ssmac/React/myfirst_reactapp/src/components/Navbar.js":"4","/Users/ssmac/React/myfirst_reactapp/src/components/TextForm.js":"5","/Users/ssmac/React/myfirst_reactapp/src/components/About.js":"6","/Users/ssmac/React/myfirst_reactapp/src/components/Alert.js":"7"},{"size":535,"mtime":1699286110073,"results":"8","hashOfConfig":"9"},{"size":2012,"mtime":1699723277423,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1699286110074,"results":"11","hashOfConfig":"9"},{"size":2239,"mtime":1699552474819,"results":"12","hashOfConfig":"9"},{"size":6732,"mtime":1699689859311,"results":"13","hashOfConfig":"9"},{"size":4056,"mtime":1699550796648,"results":"14","hashOfConfig":"9"},{"size":741,"mtime":1699688737177,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"12el1tq",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/Users/ssmac/React/myfirst_reactapp/src/index.js",[],[],["43","44","45","46","47","48"],"/Users/ssmac/React/myfirst_reactapp/src/App.js",["49","50","51"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, {useState} from 'react';\nimport {\n  HashRouter,\n  Routes,  \n  Route,\n  Link,\n} from \"react-router-dom\";\nimport Alert from './components/Alert';\n\nlet alertid = 0;\nvar timeoutid = null;\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const changeMode = () => {\n    if (mode == \"dark\"){\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#fff\";\n      showAlert(\"Light Mode set.\");\n    }\n    else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#212529\";\n      showAlert(\"Dark Mode set.\");\n    }    \n  };  \n  const [alert, setAlert] = useState([]);  \n  let showAlert = (mes) => {\n    setAlert([{\n      message : (mes),\n      id : alertid\n    }, ...alert]);\n    alertid++;\n    clearTimeout(timeoutid);\n    if (document.getElementById(\"alertbanner\") != null){\n      document.getElementById(\"alertbanner\").style.display = \"block\";\n    }\n    timeoutid = setTimeout(() => {\n      document.getElementById(\"alertbanner\").scrollTop = 0;\n      document.getElementById(\"alertbanner\").style.display = \"none\";\n    }, 3000);\n  };\n  return (    \n    <HashRouter basename='/'>\n      <div>\n        <Navbar title=\"Text Analytics\" changeMode={changeMode} mode={mode}/>     \n        {/* <div className=\"container my-3\">\n          <About mode={mode}/>\n        </div> */}        \n        <Alert message={alert}/>\n        <Routes> \n          <Route exact path='/' element={< TextForm heading=\"Enter the Text to analyse below\" mode={mode} setalert={showAlert}/>}></Route> \n          <Route exact path='/about' element={< About mode={mode}/>}></Route> \n        </Routes>\n        {/* <div className=\"container my-3\">                     \n          <TextForm heading=\"Enter the Text to analyse below\" mode={mode}/>\n        </div> */}\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","/Users/ssmac/React/myfirst_reactapp/src/reportWebVitals.js",[],[],"/Users/ssmac/React/myfirst_reactapp/src/components/Navbar.js",["52","53","54","55"],[],"import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link\n} from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  \n  return (\n    <nav className=\"navbar navbar-expand-lg bg-body-tertiary\" data-bs-theme={`${props.mode}`}>\n        <div className=\"container-fluid\" >\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <Link className={`nav-link ${window.location.href.split(\"/\").pop() == \"\" ? \"active\" : \"\"}`} aria-current=\"page\" to=\"/\">Home</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className={`nav-link ${window.location.href.split(\"/\").pop() == \"about\" ? \"active\" : \"\"}`} to=\"/about\">{props.aboutText}</Link>\n              </li>              \n            </ul>\n            {/* switch for mode change */}\n            <div class={`form-check form-switch mx-3 ${(props.mode == \"dark\") ? \"text-light\" : \"text-dark\"}`}>\n              <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.changeMode}/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{fontSize : 14 + 'px'}}>Dark Mode</label>\n            </div>\n            <form className=\"d-flex\" role=\"search\">\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\n            </form>\n          </div>\n        </div>\n    </nav>\n  )\n}\n\nNavbar.propTypes = {title : PropTypes.string.isRequired,\n                    aboutText : PropTypes.string}\nNavbar.defaultProps = {\n  title : \"Set Title Here\",\n  aboutText : \"About\",\n  mode : \"light\"\n}            ","/Users/ssmac/React/myfirst_reactapp/src/components/TextForm.js",["56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],[],"import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport '../App.css';\n//useState is called \"hook\"\n\nexport default function TextForm(props) {\n    const [text, setText] = useState(\"\"); //this is main - initialize a variable and function and set initial state\n    //to update text, you have to mandatory call setText    \n    \n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.setalert(\"Converted to Upper Case\");        \n    }\n    const handleDownClick = ()=>{\n        let newText = text.toLowerCase();\n        setText(newText);        \n    }\n    const handleOnChange = (event)=>{\n        setText(event.target.value);        \n    }\n    const handleClearAction = () => {\n      setText(\"\");\n    }\n    const handleCopy = () => {\n      navigator.clipboard.writeText(text);\n      props.setalert(\"text copied!\");\n    }\n    /*function findNumOfSyllables(_input){\n      const Hypher = require('hypher');\n      const english = require('hyphenation.en-us');\n      const h = new Hypher(english);\n      const text = \"example\";\n      const syllables = h.hyphenate(_input).length;\n      return syllables;\n    }*/\n    function getMVP(_inp){\n      var textsplit = _inp.split(\" \");\n      let dict = {};//{\"key0\" : [\"Glenn Maxwell\", 1], \"key1\" : [\"crawling on\", 2]};\n      let varr = [];\n      for (let i=0; i<textsplit.length-1; i++){\n          let name1 = \"key\" + i;\n          let val1 = textsplit[i];\n          let val2 = textsplit[i+1];\n          let valArr = Object.values(dict).map(x => x[0]);\n          let keyArr = Object.keys(dict);\n          if (val1.indexOf(\",\") != val1.length-1 && val1.indexOf(\".\") != val1.length-1){\n              let temp = val1.replace(\",\",\"\").replace(\".\",\"\") + \" \" + val2.replace(\",\",\"\").replace(\".\",\"\");\n              if (valArr.indexOf(temp) != -1){            \n                  let a = valArr.indexOf(temp);\n                  let b = keyArr[a];\n                  dict[b][1]++;\n                  //console.log(dict[b]);\n              }\n              else{\n                  dict[name1] = [val1.replace(\",\",\"\") + \" \" + val2.replace(\",\",\"\"), 1];\n                  //console.log(dict[name1]); \n              }\n          }\n          if (i == textsplit.length-2){\n              varr = Object.values(dict);\n          }       \n      }\n      let ans1 = varr.reduce((prev, curr) => (curr[1]>prev[1]) ? curr : prev, [\"\", 0]);\n      return ans1;\n   }\n   const style1 = {\n    color: \"#212529\",\n    backgroundColor : \"white\"\n   };\n   const style2 = {\n    color: \"white\",\n    backgroundColor : \"#212529\"\n   }\n  return (\n    <div className=\"container mrt\" style={(props.mode == \"dark\") ? style2 : style1}>\n        <h1>Text Area</h1> \n        <div className=\"mb-3 my-3\">\n            <label htmlFor=\"myText\" className=\"form-label\">{props.heading}</label>\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"9\" placeholder=\"Enter text here\"/>\n        </div>\n        <button className={`btn ${(props.mode == \"dark\") ? \"btn-success\" : \"btn-primary\"} mrr my-3`} onClick={handleUpClick}>Convert to Upper Case</button>     \n        <button className={`btn ${(props.mode == \"dark\") ? \"btn-success\" : \"btn-primary\"} mrr my-3`} onClick={handleDownClick}>Convert to Lower Case</button>                   \n        <button className={`btn ${(props.mode == \"dark\") ? \"btn-success\" : \"btn-primary\"} mrr my-3`} onClick={handleClearAction}>Clear Text</button>                   \n        <button className={`btn ${(props.mode == \"dark\") ? \"btn-success\" : \"btn-primary\"} mrr my-3`} onClick={handleCopy}>Copy Text</button>                   \n        <h2 className=\"my-2\">Text count</h2>\n        <div className=\"my-2\">The word count is {text.split(\" \").length} and the number of characters is {text.length}</div>\n        <div className=\"my-2\">Time taken to read : {0.008 * text.split(\" \").length} minutes</div>\n        <h2 className=\"my-4\">Preview</h2>\n        <span className=\"my-2\">{text}</span>      \n\n        <ul class=\"list-group my-3\" style={{width: 700 + 'px'}}>\n          <li class=\"list-group-item d-flex justify-content-between align-items-start\" style={(props.mode == \"dark\") ? style2 : style1}>\n            <div class=\"ms-2 me-auto\">\n              Number of characters (including spaces):\n            </div>\n            <span>{text.length}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-start\" style={(props.mode == \"dark\") ? style2 : style1}>\n            <div class=\"ms-2 me-auto\">\n            Number of characters (without spaces):\n            </div>\n            <span>{text.replace(\" \", \"\").length}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-start\" style={(props.mode == \"dark\") ? style2 : style1}>\n            <div class=\"ms-2 me-auto\">\n            Number of words:\n            </div>\n            <span>{text.length != 0 ? text.split(\" \").length : 0}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-start\" style={(props.mode == \"dark\") ? style2 : style1}>\n            <div class=\"ms-2 me-auto\">\n            Number of sentences:\n            </div>\n            <span>{text.length != 0 ? text.split(\".\").length-1 : 0}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-start\" style={(props.mode == \"dark\") ? style2 : style1}>\n            <div class=\"ms-2 me-auto\">\n            Number of syllables:\n            </div>\n            <p class=\"font-italic\">To be added</p>\n          </li>\n        </ul>\n       \n        <ul class=\"list-group list-group-horizontal my-3\">\n            <li class=\"list-group-item\" style={(props.mode == \"dark\") ? style2 : style1}><div class=\"ms-2 me-auto\" >\n              <div  style={{width: 524 + 'px'}} class=\"fw-bold\">Some top phrases containing 2 words (without punctuation marks)</div>\n              {getMVP(text)[0]}\n            </div></li>\n            <li class=\"list-group-item\" style={(props.mode == \"dark\") ? style2 : style1}><div class=\"ms-2 me-auto\">\n              <div class=\"fw-bold\">Occurences</div>\n              {getMVP(text)[1]}\n            </div></li>\n        </ul>\n        <h3>Unfiltered Work Count</h3>\n        {/* <ul class=\"list-group list-group-horizontal my-3\">\n            <li class=\"list-group-item\" >\n              <ol>\n\n              </ol>\n            </li>\n            <li class=\"list-group-item\">\n\n            </li>\n        </ul> */}\n        \n    </div>\n  )\n}\n\nTextForm.propTypes = { title : PropTypes.string.isRequired,\n                     }\nTextForm.defaultProps = {\n  heading : \"Enter Text Here\",\n  mode : \"light\"\n}   ","/Users/ssmac/React/myfirst_reactapp/src/components/About.js",["74","75","76","77","78","79","80","81"],[],"import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function About(props) {   \n   const style1 = {\n    color: \"black\",\n    backgroundColor: \"white\"\n   };\n   const style2 = {\n    color: \"white\",\n    backgroundColor: \"#212529\"\n   }\n  return (\n    <>\n        <div className=\"accordion container\" id=\"accordionExample\">\n            <div className=\"accordion-item\" style={props.mode == \"dark\" ? style2 : style1}>\n                <h2 className=\"accordion-header\">\n                <button className=\"accordion-button\" style={props.mode == \"dark\" ? style2 : style1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                    Accordion Item #1\n                </button>\n                </h2>\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\" style={props.mode == \"dark\" ? style2 : style1}>\n                <h2 className=\"accordion-header\">\n                <button className=\"accordion-button collapsed\" style={props.mode == \"dark\" ? style2 : style1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                    Accordion Item #2\n                </button>\n                </h2>\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\" style={props.mode == \"dark\" ? style2 : style1}>\n                <h2 className=\"accordion-header\">\n                <button className=\"accordion-button collapsed\" style={props.mode == \"dark\" ? style2 : style1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                    Accordion Item #3\n                </button>\n                </h2>\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n        </div>\n    </>\n  )\n}\nAbout.defaultProps = {\n    mode : \"light\"\n  }  \n","/Users/ssmac/React/myfirst_reactapp/src/components/Alert.js",["82","83","84","85"],[],"import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport '../App.css';\n\nlet def = -1;\nexport default function Alert(props) {\n    // if (def == -1){\n    //     def = 0;\n    //     setTimeout(() => {\n    //         def = -1;\n    //     }, 3000);        \n    // }${def == -1 ? \"invisible\" : \"\"}\n    return (\n        <div id=\"alertbanner\" className={`allert`}>\n            {props.message != null &&\n            props.message.map(element => {\n                return <div key={element.id} className={`alert alert-success d-flex align-items-center ${(props.message.indexOf(element) == 0) ? \"newaddition\" : \"\"}`} role=\"alert\" style={{width : '500px'}}><div>{element.message}</div></div>\n            })}\n        </div>\n    );\n}",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":8,"nodeType":"100","messageId":"101","endLine":1,"endColumn":12},{"ruleId":"98","severity":1,"message":"102","line":11,"column":3,"nodeType":"100","messageId":"101","endLine":11,"endColumn":7},{"ruleId":"103","severity":1,"message":"104","line":20,"column":14,"nodeType":"105","messageId":"106","endLine":20,"endColumn":16},{"ruleId":"98","severity":1,"message":"107","line":1,"column":16,"nodeType":"100","messageId":"101","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"104","line":19,"column":84,"nodeType":"105","messageId":"106","endLine":19,"endColumn":86},{"ruleId":"103","severity":1,"message":"104","line":22,"column":84,"nodeType":"105","messageId":"106","endLine":22,"endColumn":86},{"ruleId":"103","severity":1,"message":"104","line":26,"column":68,"nodeType":"105","messageId":"106","endLine":26,"endColumn":70},{"ruleId":"103","severity":1,"message":"108","line":47,"column":33,"nodeType":"105","messageId":"106","endLine":47,"endColumn":35},{"ruleId":"103","severity":1,"message":"108","line":47,"column":71,"nodeType":"105","messageId":"106","endLine":47,"endColumn":73},{"ruleId":"103","severity":1,"message":"108","line":49,"column":40,"nodeType":"105","messageId":"106","endLine":49,"endColumn":42},{"ruleId":"103","severity":1,"message":"104","line":60,"column":17,"nodeType":"105","messageId":"106","endLine":60,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":76,"column":55,"nodeType":"105","messageId":"106","endLine":76,"endColumn":57},{"ruleId":"103","severity":1,"message":"104","line":82,"column":47,"nodeType":"105","messageId":"106","endLine":82,"endColumn":49},{"ruleId":"103","severity":1,"message":"104","line":83,"column":47,"nodeType":"105","messageId":"106","endLine":83,"endColumn":49},{"ruleId":"103","severity":1,"message":"104","line":84,"column":47,"nodeType":"105","messageId":"106","endLine":84,"endColumn":49},{"ruleId":"103","severity":1,"message":"104","line":85,"column":47,"nodeType":"105","messageId":"106","endLine":85,"endColumn":49},{"ruleId":"103","severity":1,"message":"104","line":93,"column":107,"nodeType":"105","messageId":"106","endLine":93,"endColumn":109},{"ruleId":"103","severity":1,"message":"104","line":99,"column":107,"nodeType":"105","messageId":"106","endLine":99,"endColumn":109},{"ruleId":"103","severity":1,"message":"104","line":105,"column":107,"nodeType":"105","messageId":"106","endLine":105,"endColumn":109},{"ruleId":"103","severity":1,"message":"108","line":109,"column":32,"nodeType":"105","messageId":"106","endLine":109,"endColumn":34},{"ruleId":"103","severity":1,"message":"104","line":111,"column":107,"nodeType":"105","messageId":"106","endLine":111,"endColumn":109},{"ruleId":"103","severity":1,"message":"108","line":115,"column":32,"nodeType":"105","messageId":"106","endLine":115,"endColumn":34},{"ruleId":"103","severity":1,"message":"104","line":117,"column":107,"nodeType":"105","messageId":"106","endLine":117,"endColumn":109},{"ruleId":"103","severity":1,"message":"104","line":126,"column":60,"nodeType":"105","messageId":"106","endLine":126,"endColumn":62},{"ruleId":"103","severity":1,"message":"104","line":130,"column":60,"nodeType":"105","messageId":"106","endLine":130,"endColumn":62},{"ruleId":"98","severity":1,"message":"107","line":1,"column":16,"nodeType":"100","messageId":"101","endLine":1,"endColumn":24},{"ruleId":"98","severity":1,"message":"109","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":16,"column":63,"nodeType":"105","messageId":"106","endLine":16,"endColumn":65},{"ruleId":"103","severity":1,"message":"104","line":18,"column":72,"nodeType":"105","messageId":"106","endLine":18,"endColumn":74},{"ruleId":"103","severity":1,"message":"104","line":28,"column":63,"nodeType":"105","messageId":"106","endLine":28,"endColumn":65},{"ruleId":"103","severity":1,"message":"104","line":30,"column":82,"nodeType":"105","messageId":"106","endLine":30,"endColumn":84},{"ruleId":"103","severity":1,"message":"104","line":40,"column":63,"nodeType":"105","messageId":"106","endLine":40,"endColumn":65},{"ruleId":"103","severity":1,"message":"104","line":42,"column":82,"nodeType":"105","messageId":"106","endLine":42,"endColumn":84},{"ruleId":"98","severity":1,"message":"107","line":1,"column":16,"nodeType":"100","messageId":"101","endLine":1,"endColumn":24},{"ruleId":"98","severity":1,"message":"110","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":16},{"ruleId":"98","severity":1,"message":"111","line":5,"column":5,"nodeType":"100","messageId":"101","endLine":5,"endColumn":8},{"ruleId":"103","severity":1,"message":"104","line":17,"column":138,"nodeType":"105","messageId":"106","endLine":17,"endColumn":140},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["112"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","Expected '!==' and instead saw '!='.","'PropTypes' is defined but never used.","'ReactDOM' is defined but never used.","'def' is assigned a value but never used.","no-object-constructor"]